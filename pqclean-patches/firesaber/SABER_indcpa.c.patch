--- work/firesaber/scheme/SABER_indcpa.c
+++ work-patched/firesaber/scheme/SABER_indcpa.c
@@ -1,26 +1,22 @@
-
-#include <string.h>
-
-#include <arm_neon.h>
-
-#include "SABER_params.h"
+#include "NTT.h"
 #include "SABER_indcpa.h"
-#include "randombytes.h"
+#include "SABER_params.h"
+#include "cbd.h"
 #include "fips202.h"
 #include "fips202x2.h"
-#include "cbd.h"
 #include "pack_unpack.h"
-
-#include "NTT.h"
+#include "randombytes.h"
+#include <arm_neon.h>
+#include <string.h>
 
 #define h1 (1 << (SABER_EQ - SABER_EP - 1))
 #define h2 ((1 << (SABER_EP - 2)) - (1 << (SABER_EP - SABER_ET - 1)) + (1 << (SABER_EQ - SABER_EP - 1)))
 
-extern void __asm_round(uint16_t des[SABER_N], uint32_t src[SABER_N]);
-extern void __asm_enc_add_msg(uint16_t cipher[SABER_N], uint32_t src[SABER_N], uint16_t msg[SABER_N], int const_h1);
-extern void __asm_dec_get_msg(uint16_t msg[SABER_N], uint32_t src[SABER_N], uint16_t cipher[SABER_N], int const_h2);
+extern void PQCLEAN_NAMESPACE_asm_round(uint16_t des[SABER_N], uint32_t src[SABER_N]);
+extern void PQCLEAN_NAMESPACE_asm_enc_add_msg(uint16_t cipher[SABER_N], uint32_t src[SABER_N], uint16_t msg[SABER_N], int const_h1);
+extern void PQCLEAN_NAMESPACE_asm_dec_get_msg(uint16_t msg[SABER_N], uint32_t src[SABER_N], uint16_t cipher[SABER_N], int const_h2);
 
-void indcpa_kem_keypair(uint8_t pk[SABER_INDCPA_PUBLICKEYBYTES], uint8_t sk[SABER_INDCPA_SECRETKEYBYTES]){
+void indcpa_kem_keypair(uint8_t pk[SABER_INDCPA_PUBLICKEYBYTES], uint8_t sk[SABER_INDCPA_SECRETKEYBYTES]) {
 
     uint32_t A_NTT[SABER_L][SABER_L][SABER_N];
     uint32_t s_NTT[SABER_L][SABER_N];
@@ -49,37 +45,37 @@
     shake128(shake_s_buf, sizeof(shake_s_buf), seed_s, SABER_NOISE_SEEDBYTES);
     #endif
 
-    for(int i = 0; i < SABER_L; i++){
-        for(int j = 0; j < SABER_L; j++){
-	    __asm_13_to_32(&(A_NTT[j][i][0]), shake_A_buf + (i * SABER_L + j) * SABER_POLYBYTES);
-	}
+    for (int i = 0; i < SABER_L; i++) {
+        for (int j = 0; j < SABER_L; j++) {
+            PQCLEAN_NAMESPACE_asm_13_to_32(&(A_NTT[j][i][0]), shake_A_buf + (i * SABER_L + j) * SABER_POLYBYTES);
+        }
     }
 
-    for(int i = 0; i < SABER_L; i++){
+    for (int i = 0; i < SABER_L; i++) {
         cbd(s[i], shake_s_buf + i * SABER_POLYCOINBYTES);
-        __asm_16_to_32(&(s_NTT[i][0]), &(s[i][0]));
+        PQCLEAN_NAMESPACE_asm_16_to_32(&(s_NTT[i][0]), &(s[i][0]));
     }
 
-    for(int i = 0; i < SABER_L; i++){
+    for (int i = 0; i < SABER_L; i++) {
         NTT_heavy(&(s_NTT_asymmetric[i][0]), &(s_NTT[i][0]));
     }
 
-    for(int i = 0; i < SABER_L; i++){
-        for(int j = 0; j < SABER_L; j++){
+    for (int i = 0; i < SABER_L; i++) {
+        for (int j = 0; j < SABER_L; j++) {
             NTT(&(A_NTT[i][j][0]));
-	}
+        }
     }
 
-    for(int i = 0; i < SABER_L; i++){
-        __asm_asymmetric_mul(&(A_NTT[i][0][0]), &(s_NTT[0][0]), &(s_NTT_asymmetric[0][0]), constants);
+    for (int i = 0; i < SABER_L; i++) {
+        PQCLEAN_NAMESPACE_asm_asymmetric_mul(&(A_NTT[i][0][0]), &(s_NTT[0][0]), &(s_NTT_asymmetric[0][0]), constants);
     }
 
-    for(int i = 0; i < SABER_L; i++){
+    for (int i = 0; i < SABER_L; i++) {
         iNTT(&(A_NTT[i][0][0]));
     }
 
-    for(int i = 0; i < SABER_L; i++){
-        __asm_round(b[i], A_NTT[i][0]);
+    for (int i = 0; i < SABER_L; i++) {
+        PQCLEAN_NAMESPACE_asm_round(b[i], A_NTT[i][0]);
     }
 
     POLVECq2BS(sk, s);
@@ -87,7 +83,7 @@
     memcpy(pk + SABER_POLYVECCOMPRESSEDBYTES, seed_A, sizeof(seed_A));
 }
 
-void indcpa_kem_enc(const uint8_t m[SABER_KEYBYTES], const uint8_t seed_sp[SABER_NOISE_SEEDBYTES], const uint8_t pk[SABER_INDCPA_PUBLICKEYBYTES], uint8_t ciphertext[SABER_BYTES_CCA_DEC]){
+void indcpa_kem_enc(const uint8_t m[SABER_KEYBYTES], const uint8_t seed_sp[SABER_NOISE_SEEDBYTES], const uint8_t pk[SABER_INDCPA_PUBLICKEYBYTES], uint8_t ciphertext[SABER_BYTES_CCA_DEC]) {
 
     uint32_t A_NTT[SABER_L][SABER_L][SABER_N];
     uint32_t s_NTT[SABER_L][SABER_N];
@@ -115,56 +111,56 @@
     shake128(shake_s_buf, sizeof(shake_s_buf), seed_sp, SABER_NOISE_SEEDBYTES);
     #endif
 
-    for(int i = 0; i < SABER_L; i++){
-        for(int j = 0; j < SABER_L; j++){
-            __asm_13_to_32(&(A_NTT[i][j][0]), shake_A_buf + (i * SABER_L + j) * SABER_POLYBYTES);
+    for (int i = 0; i < SABER_L; i++) {
+        for (int j = 0; j < SABER_L; j++) {
+            PQCLEAN_NAMESPACE_asm_13_to_32(&(A_NTT[i][j][0]), shake_A_buf + (i * SABER_L + j) * SABER_POLYBYTES);
         }
     }
 
-    for(int i = 0; i < SABER_L; i++){
+    for (int i = 0; i < SABER_L; i++) {
         cbd(sp[i], shake_s_buf + i * SABER_POLYCOINBYTES);
-        __asm_16_to_32(&(s_NTT[i][0]), &(sp[i][0]));
+        PQCLEAN_NAMESPACE_asm_16_to_32(&(s_NTT[i][0]), &(sp[i][0]));
     }
 
-    for(int i = 0; i < SABER_L; i++){
+    for (int i = 0; i < SABER_L; i++) {
         NTT_heavy(&(s_NTT_asymmetric[i][0]), &(s_NTT[i][0]));
     }
 
-    for(int i = 0; i < SABER_L; i++){
-        for(int j = 0; j < SABER_L; j++){
+    for (int i = 0; i < SABER_L; i++) {
+        for (int j = 0; j < SABER_L; j++) {
             NTT(&(A_NTT[i][j][0]));
         }
     }
 
-    for(int i = 0; i < SABER_L; i++){
-        __asm_asymmetric_mul(&(A_NTT[i][0][0]), &(s_NTT[0][0]), &(s_NTT_asymmetric[0][0]), constants);
+    for (int i = 0; i < SABER_L; i++) {
+        PQCLEAN_NAMESPACE_asm_asymmetric_mul(&(A_NTT[i][0][0]), &(s_NTT[0][0]), &(s_NTT_asymmetric[0][0]), constants);
     }
 
-    for(int i = 0; i < SABER_L; i++){
+    for (int i = 0; i < SABER_L; i++) {
         iNTT(&(A_NTT[i][0][0]));
     }
 
-    for(int i = 0; i < SABER_L; i++){
-        __asm_round(bp[i], A_NTT[i][0]);
+    for (int i = 0; i < SABER_L; i++) {
+        PQCLEAN_NAMESPACE_asm_round(bp[i], A_NTT[i][0]);
     }
 
 
     BS2POLVECp(pk, b);
     BS2POLmsg(m, mp);
 
-    for(int i = 0; i < SABER_L; i++){
-        __asm_16_to_32(&(b_NTT[i][0]), &(b[i][0]));
+    for (int i = 0; i < SABER_L; i++) {
+        PQCLEAN_NAMESPACE_asm_16_to_32(&(b_NTT[i][0]), &(b[i][0]));
     }
 
-    for(int i = 0; i < SABER_L; i++){
+    for (int i = 0; i < SABER_L; i++) {
         NTT(&(b_NTT[i][0]));
     }
 
-    __asm_asymmetric_mul(&(b_NTT[0][0]), &(s_NTT[0][0]), &(s_NTT_asymmetric[0][0]), constants);
+    PQCLEAN_NAMESPACE_asm_asymmetric_mul(&(b_NTT[0][0]), &(s_NTT[0][0]), &(s_NTT_asymmetric[0][0]), constants);
 
     iNTT(&(b_NTT[0][0]));
 
-    __asm_enc_add_msg(vp, b_NTT[0], mp, h1);
+    PQCLEAN_NAMESPACE_asm_enc_add_msg(vp, b_NTT[0], mp, h1);
 
     POLVECp2BS(ciphertext, bp);
     POLT2BS(ciphertext + SABER_POLYVECCOMPRESSEDBYTES, vp);
@@ -172,7 +168,7 @@
 
 }
 
-void indcpa_kem_dec(const uint8_t sk[SABER_INDCPA_SECRETKEYBYTES], const uint8_t ciphertext[SABER_BYTES_CCA_DEC], uint8_t m[SABER_KEYBYTES]){
+void indcpa_kem_dec(const uint8_t sk[SABER_INDCPA_SECRETKEYBYTES], const uint8_t ciphertext[SABER_BYTES_CCA_DEC], uint8_t m[SABER_KEYBYTES]) {
 
     uint32_t b_NTT[SABER_L][SABER_N];
     uint32_t s_NTT[SABER_L][SABER_N];
@@ -183,27 +179,27 @@
 
     BS2POLT(ciphertext + SABER_POLYVECCOMPRESSEDBYTES, cm);
 
-    for(int i = 0; i < SABER_L; i++){
-        __asm_13_to_32(&(s_NTT[i][0]), sk + i * SABER_POLYBYTES);
+    for (int i = 0; i < SABER_L; i++) {
+        PQCLEAN_NAMESPACE_asm_13_to_32(&(s_NTT[i][0]), sk + i * SABER_POLYBYTES);
     }
 
-    for(int i = 0; i < SABER_L; i++){
-        __asm_10_to_32(&(b_NTT[i][0]), ciphertext + i * (SABER_EP * SABER_N / 8));
+    for (int i = 0; i < SABER_L; i++) {
+        PQCLEAN_NAMESPACE_asm_10_to_32(&(b_NTT[i][0]), ciphertext + i * (SABER_EP * SABER_N / 8));
     }
 
-    for(int i = 0; i < SABER_L; i++){
+    for (int i = 0; i < SABER_L; i++) {
         NTT_heavy(&(s_NTT_asymmetric[i][0]), &(s_NTT[i][0]));
     }
 
-    for(int i = 0; i < SABER_L; i++){
+    for (int i = 0; i < SABER_L; i++) {
         NTT(&(b_NTT[i][0]));
     }
 
-    __asm_asymmetric_mul(&(b_NTT[0][0]), &(s_NTT[0][0]), &(s_NTT_asymmetric[0][0]), constants);
+    PQCLEAN_NAMESPACE_asm_asymmetric_mul(&(b_NTT[0][0]), &(s_NTT[0][0]), &(s_NTT_asymmetric[0][0]), constants);
 
     iNTT(&(b_NTT[0][0]));
 
-    __asm_dec_get_msg(v, b_NTT[0], cm, h2);
+    PQCLEAN_NAMESPACE_asm_dec_get_msg(v, b_NTT[0], cm, h2);
 
     POLmsg2BS(m, v);
 }

