--- work/dilithium2/scheme/polyvec.c
+++ work-patched/dilithium2/scheme/polyvec.c
@@ -6,7 +6,7 @@
 #include "reduce.h"
 
 static const int32_t l_montgomery_const[4] = {
-DILITHIUM_Q, DILITHIUM_QINV
+    DILITHIUM_Q, DILITHIUM_QINV
 };
 
 /*************************************************
@@ -24,7 +24,7 @@
     unsigned int i, j;
 
     for (j = 0; j < L; ++j) {
-        for(i = 0; i < K; i += 2){
+        for (i = 0; i < K; i += 2) {
             poly_uniformx2(&mat[i + 0].vec[j], &mat[i + 1].vec[j], rho, (uint16_t) ((i << 8) + j), (uint16_t) (((i + 1) << 8) + j));
         }
     }
@@ -53,10 +53,10 @@
 void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
     unsigned int i;
 
-    for (i = 0; i < L-1; i += 2) {
+    for (i = 0; i < L - 1; i += 2) {
         poly_uniform_gamma1x2(&v->vec[i + 0], &v->vec[i + 1], seed, (uint16_t) (L * nonce + i + 0), (uint16_t) (L * nonce + i + 1));
     }
-    if(L & 1){
+    if (L & 1) {
         poly_uniform_gamma1(&v->vec[i], seed, (uint16_t) (L * nonce + L - 1));
     }
 }
@@ -146,11 +146,11 @@
 *              - const polyvecl *u: pointer to first input vector
 *              - const polyvecl *v: pointer to second input vector
 **************************************************/
-extern void __asm_polyvecl_pointwise_acc_montgomery(int32_t*, const int32_t*, const int32_t*, const int32_t*);
+extern void PQCLEAN_NAMESPACE_asm_polyvecl_pointwise_acc_montgomery(int32_t *, const int32_t *, const int32_t *, const int32_t *);
 void polyvecl_pointwise_acc_montgomery(poly *w,
-        const polyvecl *u,
-        const polyvecl *v) {
-    __asm_polyvecl_pointwise_acc_montgomery(w->coeffs, u->vec[0].coeffs, v->vec[0].coeffs, l_montgomery_const);
+                                       const polyvecl *u,
+                                       const polyvecl *v) {
+    PQCLEAN_NAMESPACE_asm_polyvecl_pointwise_acc_montgomery(w->coeffs, u->vec[0].coeffs, v->vec[0].coeffs, l_montgomery_const);
 }
 
 /*************************************************
@@ -184,7 +184,7 @@
 void polyveck_uniform_eta(polyveck *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
     unsigned int i;
 
-    for(i = 0; i < K; ++i){
+    for (i = 0; i < K; ++i) {
         poly_uniform_eta(&v->vec[i], seed, nonce++);
     }
 
@@ -414,8 +414,8 @@
 * Returns number of 1 bits.
 **************************************************/
 unsigned int polyveck_make_hint(polyveck *h,
-        const polyveck *v0,
-        const polyveck *v1) {
+                                const polyveck *v0,
+                                const polyveck *v1) {
     unsigned int i, s = 0;
 
     for (i = 0; i < K; ++i) {

