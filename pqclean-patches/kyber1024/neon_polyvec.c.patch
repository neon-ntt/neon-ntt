--- work/kyber1024/scheme/neon_polyvec.c
+++ work-patched/kyber1024/scheme/neon_polyvec.c
@@ -1,11 +1,10 @@
-#include <arm_neon.h>
-#include "params.h"
-#include "reduce.h"
+#include "NTT_params.h"
 #include "ntt.h"
+#include "params.h"
 #include "poly.h"
 #include "polyvec.h"
-
-#include "NTT_params.h"
+#include "reduce.h"
+#include <arm_neon.h>
 
 #define _V (((1U << 26) + KYBER_Q / 2) / KYBER_Q)
 
@@ -16,13 +15,11 @@
 *
 * Arguments:   - polyvec *r: pointer to in/output vector of polynomials
 **************************************************/
-void neon_polyvec_ntt(int16_t r[KYBER_K][KYBER_N])
-{
-  unsigned int i;
-  for (i = 0; i < KYBER_K; i++)
-  {
-    neon_poly_ntt(r[i]);
-  }
+void neon_polyvec_ntt(int16_t r[KYBER_K][KYBER_N]) {
+    unsigned int i;
+    for (i = 0; i < KYBER_K; i++) {
+        neon_poly_ntt(r[i]);
+    }
 }
 
 /*************************************************
@@ -33,11 +30,11 @@
 *
 * Arguments:   - polyvec *r: pointer to in/output vector of polynomials
 **************************************************/
-void neon_polyvec_invntt_to_mont(int16_t r[KYBER_K][KYBER_N])
-{
-  unsigned int i;
-  for (i = 0; i < KYBER_K; i++)
-    neon_poly_invntt_tomont(r[i]);
+void neon_polyvec_invntt_to_mont(int16_t r[KYBER_K][KYBER_N]) {
+    unsigned int i;
+    for (i = 0; i < KYBER_K; i++) {
+        neon_poly_invntt_tomont(r[i]);
+    }
 }
 
 /*************************************************
@@ -51,14 +48,12 @@
 *            - const polyvec *a: pointer to first input vector of polynomials
 *            - const polyvec *b: pointer to second input vector of polynomials
 **************************************************/
-void neon_polyvec_add_reduce(int16_t c[KYBER_K][KYBER_N], const int16_t a[KYBER_K][KYBER_N])
-{
-  unsigned int i;
-  for (i = 0; i < KYBER_K; i++)
-  {
-    // c = c + a;
-    // c = reduce(c);
-    neon_poly_add_reduce(c[i], a[i]);
-  }
+void neon_polyvec_add_reduce(int16_t c[KYBER_K][KYBER_N], int16_t a[KYBER_K][KYBER_N]) {
+    unsigned int i;
+    for (i = 0; i < KYBER_K; i++) {
+        // c = c + a;
+        // c = reduce(c);
+        neon_poly_add_reduce(c[i], a[i]);
+    }
 }
 

