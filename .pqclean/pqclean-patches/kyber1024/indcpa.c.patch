--- work/kyber1024/scheme/indcpa.c
+++ work-patched/kyber1024/scheme/indcpa.c
@@ -279,6 +279,7 @@
         buflen = off + XOF_BLOCKBYTES;
         ctr0 += rej_uniform(&(a[2][2][0]) + ctr0, KYBER_N - ctr0, buf0, buflen);
     }
+    shake128_ctx_release(&c_state);
 
     #elif KYBER_K == 4
     for (unsigned int i = 0; i < KYBER_K; i++) {
@@ -359,11 +360,11 @@
     neon_polyvec_ntt(e);
 
     for (i = 0; i < KYBER_K; i++) {
-        __asm_point_mul_extended(&(skpv_asymmetric[i][0]), &(skpv[i][0]), pre_asymmetric_table_Q1_extended, asymmetric_const);
+        PQCLEAN_NAMESPACE__asm_point_mul_extended(&(skpv_asymmetric[i][0]), &(skpv[i][0]), pre_asymmetric_table_Q1_extended, asymmetric_const);
     }
 
     for (i = 0; i < KYBER_K; i++) {
-        __asm_asymmetric_mul_montgomery(&(a[i][0][0]), &(skpv[0][0]), &(skpv_asymmetric[0][0]), asymmetric_const, pkpv[i]);
+        PQCLEAN_NAMESPACE__asm_asymmetric_mul_montgomery(&(a[i][0][0]), &(skpv[0][0]), &(skpv_asymmetric[0][0]), asymmetric_const, pkpv[i]);
     }
 
     neon_polyvec_add_reduce(pkpv, e);
@@ -439,14 +440,14 @@
     neon_polyvec_ntt(sp);
 
     for (i = 0; i < KYBER_K; i++) {
-        __asm_point_mul_extended(&(sp_asymmetric[i][0]), &(sp[i][0]), pre_asymmetric_table_Q1_extended, asymmetric_const);
+        PQCLEAN_NAMESPACE__asm_point_mul_extended(&(sp_asymmetric[i][0]), &(sp[i][0]), pre_asymmetric_table_Q1_extended, asymmetric_const);
     }
 
     for (i = 0; i < KYBER_K; i++) {
-        __asm_asymmetric_mul(&(at[i][0][0]), &(sp[0][0]), &(sp_asymmetric[0][0]), asymmetric_const, b[i]);
+        PQCLEAN_NAMESPACE__asm_asymmetric_mul(&(at[i][0][0]), &(sp[0][0]), &(sp_asymmetric[0][0]), asymmetric_const, b[i]);
     }
 
-    __asm_asymmetric_mul(&(pkpv[0][0]), &(sp[0][0]), &(sp_asymmetric[0][0]), asymmetric_const, v);
+    PQCLEAN_NAMESPACE__asm_asymmetric_mul(&(pkpv[0][0]), &(sp[0][0]), &(sp_asymmetric[0][0]), asymmetric_const, v);
 
     neon_polyvec_invntt_to_mont(b);
     invntt(v);
@@ -487,10 +488,10 @@
     neon_polyvec_ntt(b);
 
     for (i = 0; i < KYBER_K; i++) {
-        __asm_point_mul_extended(&(b_asymmetric[i][0]), &(b[i][0]), pre_asymmetric_table_Q1_extended, asymmetric_const);
+        PQCLEAN_NAMESPACE__asm_point_mul_extended(&(b_asymmetric[i][0]), &(b[i][0]), pre_asymmetric_table_Q1_extended, asymmetric_const);
     }
 
-    __asm_asymmetric_mul(&(skpv[0][0]), &(b[0][0]), &(b_asymmetric[0][0]), asymmetric_const, mp);
+    PQCLEAN_NAMESPACE__asm_asymmetric_mul(&(skpv[0][0]), &(b[0][0]), &(b_asymmetric[0][0]), asymmetric_const, mp);
 
     invntt(mp);
 

