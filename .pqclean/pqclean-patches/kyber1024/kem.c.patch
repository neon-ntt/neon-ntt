--- work/kyber1024/scheme/kem.c
+++ work-patched/kyber1024/scheme/kem.c
@@ -12,7 +12,7 @@
 #include "verify.h"
 #include "symmetric.h"
 #include "randombytes.h"
-#include "crypto_kem.h"
+#include "kem.h"
 
 /*************************************************
 * Name:        crypto_kem_keypair
@@ -27,8 +27,8 @@
 *
 * Returns 0 (success)
 **************************************************/
-int crypto_kem_keypair(uint8_t *pk,
-                       uint8_t *sk) {
+int PQCLEAN_NAMESPACE_crypto_kem_keypair(uint8_t *pk,
+        uint8_t *sk) {
     size_t i;
     indcpa_keypair(pk, sk);
     for (i = 0; i < KYBER_INDCPA_PUBLICKEYBYTES; i++) {
@@ -55,9 +55,9 @@
 *
 * Returns 0 (success)
 **************************************************/
-int crypto_kem_enc(uint8_t *ct,
-                   uint8_t *ss,
-                   const uint8_t *pk) {
+int PQCLEAN_NAMESPACE_crypto_kem_enc(uint8_t *ct,
+                                     uint8_t *ss,
+                                     const uint8_t *pk) {
     uint8_t buf[2 * KYBER_SYMBYTES];
     /* Will contain key, coins */
     uint8_t kr[2 * KYBER_SYMBYTES];
@@ -97,9 +97,9 @@
 *
 * On failure, ss will contain a pseudo-random value.
 **************************************************/
-int crypto_kem_dec(uint8_t *ss,
-                   const uint8_t *ct,
-                   const uint8_t *sk) {
+int PQCLEAN_NAMESPACE_crypto_kem_dec(uint8_t *ss,
+                                     const uint8_t *ct,
+                                     const uint8_t *sk) {
     size_t i;
     int fail;
     uint8_t buf[2 * KYBER_SYMBYTES];

