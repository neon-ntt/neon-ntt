--- work/kyber512/scheme/ntt.h.rej
+++ work-patched/kyber512/scheme/ntt.h.rej
@@ -0,0 +1,44 @@
+--- kyber512/scheme/ntt.h
++++ kyber512/scheme/ntt.h
+@@ -34,32 +34,33 @@
+ 
+ extern const int16_t zetas[128];
+ 
++#define ntt KYBER_NAMESPACE(ntt)
+ void ntt(int16_t r[256]);
+-
++#define invntt KYBER_NAMESPACE(invntt)
+ void invntt(int16_t r[256]);
+ 
+-extern void __asm_ntt_SIMD_top(int16_t *, const int16_t *, const int16_t *);
+-extern void __asm_ntt_SIMD_bot(int16_t *, const int16_t *, const int16_t *);
++extern void PQCLEAN_NAMESPACE__asm_ntt_SIMD_top(int16_t *, const int16_t *, const int16_t *);
++extern void PQCLEAN_NAMESPACE__asm_ntt_SIMD_bot(int16_t *, const int16_t *, const int16_t *);
+ 
+-extern void __asm_intt_SIMD_bot(int16_t *, const int16_t *, const int16_t *);
+-extern void __asm_intt_SIMD_top(int16_t *, const int16_t *, const int16_t *);
++extern void PQCLEAN_NAMESPACE__asm_intt_SIMD_bot(int16_t *, const int16_t *, const int16_t *);
++extern void PQCLEAN_NAMESPACE__asm_intt_SIMD_top(int16_t *, const int16_t *, const int16_t *);
+ 
+-extern void __asm_point_mul_extended(int16_t *, const int16_t *, const int16_t *, const int16_t *);
+-extern void __asm_asymmetric_mul(const int16_t *, const int16_t *, const int16_t *, const int16_t *, int16_t *);
+-extern void __asm_asymmetric_mul_montgomery(const int16_t *, const int16_t *, const int16_t *, const int16_t *, int16_t *);
++extern void PQCLEAN_NAMESPACE__asm_point_mul_extended(int16_t *, const int16_t *, const int16_t *, const int16_t *);
++extern void PQCLEAN_NAMESPACE__asm_asymmetric_mul(const int16_t *, const int16_t *, const int16_t *, const int16_t *, int16_t *);
++extern void PQCLEAN_NAMESPACE__asm_asymmetric_mul_montgomery(const int16_t *, const int16_t *, const int16_t *, const int16_t *, int16_t *);
+ 
+ extern
+ const int16_t asymmetric_const[8];
+ extern
+ const int16_t constants[16];
+ 
+ extern
+ const int16_t streamlined_CT_negacyclic_table_Q1_jump_extended[((NTT_N - 1) + (1 << 0) + (1 << 4) + NTT_N) << 1];
+ 
+ extern
+ const int16_t pre_asymmetric_table_Q1_extended[ARRAY_N];
+ 
+ extern
+ const int16_t streamlined_inv_GS_negacyclic_table_Q1_jump_extended[((NTT_N - 1) + (1 << 0) + (1 << 4) + NTT_N) << 1];
+ 
+ 

