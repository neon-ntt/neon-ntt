--- work/kyber512/scheme/rejsample.c
+++ work-patched/kyber512/scheme/rejsample.c
@@ -1,7 +1,7 @@
-#include <arm_neon.h>
 #include "params.h"
-#include "symmetric.h"
 #include "rejsample.h"
+#include "symmetric.h"
+#include <arm_neon.h>
 
 // Define NEON operation
 // Load 8x16
@@ -338,22 +338,22 @@
 unsigned int rej_uniform(int16_t *r,
                          unsigned int len,
                          const uint8_t *buf,
-                         unsigned int buflen)
-{
+                         unsigned int buflen) {
     unsigned int ctr, pos;
     uint16_t val0, val1;
 
     ctr = pos = 0;
-    while (ctr < len && pos + 3 <= buflen)
-    {
+    while (ctr < len && pos + 3 <= buflen) {
         val0 = ((buf[pos + 0] >> 0) | ((uint16_t)buf[pos + 1] << 8)) & 0xFFF;
         val1 = ((buf[pos + 1] >> 4) | ((uint16_t)buf[pos + 2] << 4)) & 0xFFF;
         pos += 3;
 
-        if (val0 < KYBER_Q)
+        if (val0 < KYBER_Q) {
             r[ctr++] = val0;
-        if (ctr < len && val1 < KYBER_Q)
+        }
+        if (ctr < len && val1 < KYBER_Q) {
             r[ctr++] = val1;
+        }
     }
     return ctr;
 }
@@ -370,8 +370,7 @@
 *
 * Returns number of sampled 16-bit integers (at most len)
 **************************************************/
-unsigned int neon_rej_uniform(int16_t *r, const uint8_t *buf)
-{
+unsigned int neon_rej_uniform(int16_t *r, const uint8_t *buf) {
     uint8x16x3_t neon_buf;
     uint16x8x4_t tmp, value, sign;
 
@@ -386,8 +385,7 @@
     unsigned int reduce_indexes[4], ctr[4];
     unsigned int i, count = 0;
 
-    for (i = 0; i < (UPPER_BOUND / 48) * 48 && count < KYBER_N - 32; i += 48)
-    {
+    for (i = 0; i < (UPPER_BOUND / 48) * 48 && count < KYBER_N - 32; i += 48) {
         // 0, 3, 6, 9
         // 1, 4, 7, 10
         // 2, 5, 8, 11
@@ -467,8 +465,7 @@
 
     int16_t local_buf[48];
     unsigned int local_index = 0;
-    do
-    {
+    do {
         neon_buf8 = vld3_u8(&buf[i]);
 
         // Val0: 0-1 | 3-4 | 6-7| 9-10
@@ -537,8 +534,7 @@
         i += 24;
     } while ((local_index < KYBER_N - count) && (i < UPPER_BOUND));
 
-    for (i = 0; i < local_index && count < KYBER_N; i++)
-    {
+    for (i = 0; i < local_index && count < KYBER_N; i++) {
         r[count] = local_buf[i];
         local_buf[i] = 0;
         count++;

