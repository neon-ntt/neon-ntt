--- work/dilithium5/scheme/poly.c
+++ work-patched/dilithium5/scheme/poly.c
@@ -57,11 +57,11 @@
 *
 * Arguments:   - poly *a: pointer to input/output polynomial
 **************************************************/
-extern void __asm_poly_reduce(int32_t *, const int32_t *);
+extern void PQCLEAN_NAMESPACE_asm_poly_reduce(int32_t *, const int32_t *);
 void poly_reduce(poly *a) {
     DBENCH_START();
 
-    __asm_poly_reduce(a->coeffs, montgomery_const);
+    PQCLEAN_NAMESPACE_asm_poly_reduce(a->coeffs, montgomery_const);
 
     DBENCH_STOP(*tred);
 }
@@ -74,11 +74,11 @@
 *
 * Arguments:   - poly *a: pointer to input/output polynomial
 **************************************************/
-extern void __asm_poly_caddq(int32_t *, const int32_t *);
+extern void PQCLEAN_NAMESPACE_asm_poly_caddq(int32_t *, const int32_t *);
 void poly_caddq(poly *a) {
     DBENCH_START();
 
-    __asm_poly_caddq(a->coeffs, montgomery_const);
+    PQCLEAN_NAMESPACE_asm_poly_caddq(a->coeffs, montgomery_const);
 
     DBENCH_STOP(*tred);
 }
@@ -91,11 +91,11 @@
 *
 * Arguments:   - poly *a: pointer to input/output polynomial
 **************************************************/
-extern void __asm_poly_freeze(int32_t *, const int32_t *);
+extern void PQCLEAN_NAMESPACE_asm_poly_freeze(int32_t *, const int32_t *);
 void poly_freeze(poly *a) {
     DBENCH_START();
 
-    __asm_poly_freeze(a->coeffs, montgomery_const);
+    PQCLEAN_NAMESPACE_asm_poly_freeze(a->coeffs, montgomery_const);
 
     DBENCH_STOP(*tred);
 }
@@ -205,11 +205,11 @@
 *              - const poly *a: pointer to first input polynomial
 *              - const poly *b: pointer to second input polynomial
 **************************************************/
-extern void __asm_poly_pointwise_montgomery(int32_t *des, const int32_t *src1, const int32_t *src2, const int32_t *table);
+extern void PQCLEAN_NAMESPACE_asm_poly_pointwise_montgomery(int32_t *des, const int32_t *src1, const int32_t *src2, const int32_t *table);
 void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
     DBENCH_START();
 
-    __asm_poly_pointwise_montgomery(c->coeffs, a->coeffs, b->coeffs, montgomery_const);
+    PQCLEAN_NAMESPACE_asm_poly_pointwise_montgomery(c->coeffs, a->coeffs, b->coeffs, montgomery_const);
 
     DBENCH_STOP(*tmul);
 }
@@ -226,11 +226,11 @@
 *              - poly *a0: pointer to output polynomial with coefficients c0
 *              - const poly *a: pointer to input polynomial
 **************************************************/
-extern void __asm_poly_power2round(int32_t *, int32_t *, const int32_t *);
+extern void PQCLEAN_NAMESPACE_asm_poly_power2round(int32_t *, int32_t *, const int32_t *);
 void poly_power2round(poly *a1, poly *a0, const poly *a) {
     DBENCH_START();
 
-    __asm_poly_power2round(a1->coeffs, a0->coeffs, a->coeffs);
+    PQCLEAN_NAMESPACE_asm_poly_power2round(a1->coeffs, a0->coeffs, a->coeffs);
 
     DBENCH_STOP(*tround);
 }
@@ -441,6 +441,7 @@
         ctr1 += rej_uniform(a1->coeffs + ctr1, N - ctr1, buf1, buflen);
     }
 
+
 }
 
 /*************************************************
@@ -496,6 +497,7 @@
 
         #endif
 
+
     }
 
     DBENCH_STOP(*tsample);
@@ -784,11 +786,11 @@
 * Arguments:   - poly *r: pointer to output polynomial
 *              - const uint8_t *a: byte array with bit-packed polynomial
 **************************************************/
-extern void __asm_10_to_32(int32_t *, const uint8_t *);
+extern void PQCLEAN_NAMESPACE_asm_10_to_32(int32_t *, const uint8_t *);
 void polyt1_unpack(poly *r, const uint8_t *a) {
     DBENCH_START();
 
-    __asm_10_to_32(r->coeffs, a);
+    PQCLEAN_NAMESPACE_asm_10_to_32(r->coeffs, a);
 
     DBENCH_STOP(*tpack);
 }

